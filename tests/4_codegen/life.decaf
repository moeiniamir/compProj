



class rndModule {

  int seed;

  void Init(int seedVal) {
    seed = seedVal;
  }

  int Random() {
    seed = (15625 * (seed % 10000) + 22221) % 65536;
    return seed;
  }

  int RndInt(int max) {
    return (Random() % max);
  }

}





class cell
{
  bool state;

  void Init( bool state)  
  {
    this.state = state;
  } 
  bool GetState()
  {
    return this.state;
  }
  void SetState(bool state)
  {
    this.state = state;
  }
  
}



class column
{
  int length;
  cell [] arr;

  cell GetY(int y)
  {
    return arr[y];
  }
  void SetY(int y, cell c)
  {
    arr[y] = c;
  }


  void Init(int length)
  {
    int y;
    arr = NewArray(length, cell);
    this.length = length;
    for(y = 0; y < length; y = y + 1)
      {
	arr[y] = New(cell);
	arr[y].Init(false);
      }
  }

}



class matrix
{
  int x_dim;
  int y_dim;
  column [] col;

  void Init(int x_dim, int y_dim)
  {
    int x;
    int y;
    this.y_dim = y_dim;
    this.x_dim = x_dim;

    col = NewArray(x_dim, column);

    for(x = 0; x < x_dim; x = x + 1)
      {
        col[x] = New(column);
	col[x].Init(y_dim);
      }
  }
  void Set(int x, int y, bool state)
  {
      column mcol;
      cell mcell;



      if(x < 0 ) return;
      if(x >= this.x_dim) return;

      if(y < 0 ) return;
      if(y >= this.y_dim) return;

      mcol = col[x];
      mcell = mcol.GetY(y);
     
      mcell.SetState(state);
  }

  bool Get(int x, int y)
  {
    column mcol;
    cell mcell;


    if(x < 0 ) return false;
    if(x >= this.x_dim) return false;

    if(y < 0 ) return false;
    if(y >= this.y_dim) return false;


    mcol = col[x];
    mcell = mcol.GetY(y);

    return mcell.GetState();
  }
  
}


class life
{

  matrix current;
 

  matrix m0;
  matrix m1;

  rndModule rnd;
  

  int x_dim;
  int y_dim;

  void Init(int x_dim, int y_dim)
  {
    int x;
    int y;

    x = 0;
    y = 0;
    this.x_dim = x_dim;
    this.y_dim = y_dim;

    this.m0 = New(matrix);
    this.m1 = New(matrix);
    
    current = m0;

    m0.Init(x_dim, y_dim);
    m1.Init(x_dim, y_dim);


    for(y = 0; y < this.y_dim; y = y + 1)
      {
	for(x = 0; x < this.x_dim; x = x + 1)
	  {
	    m0.Set(x,y,false);
	    m1.Set(x,y,false);
	  }
      }
    
  }


  bool SetInit(int x, int y, bool state)
  {

    if(x < 0) return false;
    if(y < 0) return false;
    if(x >= this.x_dim) return false;
    if(y >= this.y_dim) return false;


    current.Set(x,y,state);
    return true;
  }


  void PrintMatrix()
  {
    int x;
    int y;
    int s;

    for(y = 0; y < this.y_dim; y = y + 1)
      {
	for(x = 0; x < this.x_dim; x = x + 1)
	  {


	     if(current.Get(x,y))
             {
               s = 1;
             }
             else
             {
               s = 0;
             }

	    Print("| ", s , " ");
	    if(x == (this.x_dim - 1))
	      {
		Print("|\n");
	      }
	  }
      }

  }


  void DoLife()
  {
    int x;
    int y;
    
    int i;
    int j;

    matrix n;



    if(current == m0)
      {
	n = m1;
      }
    else
      {
	n = m0;
      }


     
    for(y = 0; y < this.y_dim; y = y + 1)
      {
	for(x = 0; x < this.x_dim; x = x + 1)
	  {
	    int neigh_count;
	    bool my_state;
	    neigh_count = 0;
	    my_state = current.Get(x,y);


	    for(j = (y - 1); j < (y + 2); j = j + 1)
	      {
		for(i = (x - 1); i < (x + 2); i = i + 1)
		  {

		    bool skip;
		    skip = (x == i) && (y == j);
		    

		    if((!skip) && current.Get(i,j))
		      {
			neigh_count = neigh_count + 1;
		      }
		    		    
		  }
		
	      }


	    if(my_state)
	      {

		if((neigh_count == 2) || (neigh_count == 3)) 
		  {
		    n.Set(x,y,true);
		  }
		else
		  {
		    n.Set(x,y,false);
		  }
	      }

	    else
	      {

		if(neigh_count == 3)
		  {
		    n.Set(x,y,true);
		  }


		else
		  {
		    n.Set(x,y,false);
		  }
		
	      }


	  }
      }

      

    current = n;


  }
  

  void runLife(int gen)
  {
    int i;
    int iter;
    i = 0;
    
    if(gen < 0) 
    {
      iter = 0; 
    }
    else
    {
      iter = gen;
    }


    Print("Initial generation\n");
    this.PrintMatrix();
    
    while(i < iter)
      {
	this.DoLife();
	Print("New generation = ", i, "\n");
        this.PrintMatrix();
	i = i + 1;
      }

  }

  void playLife()
  {
     int x;
     int y;
     int gen; 
     int use_rand;

     x = 0;
     y = 0;
     gen = 0;
     use_rand = 0;
     Print("The Game of Life using (Brown Univ) CS31 Rules\n");
     

     Print("Enter X dimension for game board\n");
     while(x <= 0)
     {
       x = ReadInteger();
       if(x <= 0) 
       {
         Print("Invalid x dimension, try again\n");
       }
     }


     Print("Enter Y dimension for game board\n");
     while(y <= 0)
     {
       y = ReadInteger();
       if(y <= 0) 
       {
         Print("Invalid y dimension, try again\n");
       }
     }
    

    this.Init(x,y);
    x = 0;
    y = 0;

    
    Print("Would you like to use a random starting state?\n");
    Print("Type 0 for no, anything else for yes\n");

    use_rand = ReadInteger();

    if(use_rand != 0)
    {
       Print("Please enter an random seed\n");
       x = ReadInteger();
       
       this.rnd = New(rndModule);

       this.rnd.Init(x);


	
       gen = this.rnd.RndInt(this.x_dim * this.y_dim);
       
       while(gen > 0)
       {
        x = this.rnd.RndInt(x_dim);
	y = this.rnd.RndInt(y_dim);
        this.SetInit(x,y,true);

        gen = gen - 1;
       }


    }
    else
    {   
      Print("Input initial live cell\n"); 
      while( (x != -1) && (y != -1))
      {
        Print("Enter x\n");
	x = ReadInteger();
	Print("Enter y\n");
	y = ReadInteger();
        
        if(!((x == -1) && (y == -1)))
        {    
	  if(!this.SetInit(x,y,true))
          {
	     Print("x = ",x, " and y = ", y, "are bad coords\n");
	     Print("Try again\n");
          }
	  else
          {
	      Print("Entering x = ",x, ", y = ", y, "\n");
          }
        }
     }
   }

   Print("How many generations would like you run?\n");
   gen = ReadInteger();

   this.runLife(gen);
    		 
  }

}

void main()
{    
    life l;
    l = New(life);

    l.playLife();

}
